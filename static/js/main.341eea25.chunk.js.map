{"version":3,"sources":["components/App/App.module.scss","components/Info/Info.module.scss","config/config.ts","assets/btc.svg","assets/eur.svg","assets/rur.svg","assets/uah.svg","assets/usd.svg","assets/remove.svg","components/CurrencyRow/CurrencyRow.tsx","redux/actions.ts","redux/selectors.ts","components/Info/Info.tsx","services/api.ts","utils/utils.ts","components/App/App.tsx","redux/reducers.ts","redux/store.ts","index.tsx","components/CurrencyRow/CurrencyRow.module.scss"],"names":["module","exports","Currency","currencyFlags","UAH","uah","BTC","btc","USD","usd","EUR","eur","RUR","rur","CurrencyRow","allCurrencies","selectedCurrency","handleCurrencyChange","amount","handleAmountChange","handleResetAmount","className","s","container","inputContainer","type","input","value","onChange","button","onClick","remove","src","alt","img","select","map","currency","fromAmountAction","createAction","toAmountAction","fromCurrencyAction","toCurrencyAction","getFromAmount","state","currencies","getToAmount","getFromCurrency","getToCurrency","Info","fromAmount","useSelector","toAmount","fromCurrency","toCurrency","to","getExchangeRates","a","fetch","then","response","json","data","console","log","validateInput","replace","App","dispatch","useDispatch","useState","error","setError","setAllCurrencies","setFromCurrency","setToCurrency","—ÅurrencyRate","setCurrencyRate","setAmount","amountFromCurrency","setAmountFromCurrency","exchangeRatesFromApi","setExchangeRatesFromApi","useEffect","exchangeRates","length","baseCurrency","base_ccy","exchangeRate","ccy","initDataFromApi","rate","from","mapCurrencies","forEach","sale","getCurrencyRate","app","e","target","equals","initialState","currenciesReducer","createReducer","builder","addCase","action","payload","combineReducers","store","configureStore","reducer","rootReducer","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.341eea25.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3BT4Y\",\"equals\":\"App_equals__IHSw5\",\"error\":\"App_error__3kwyn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Info_container__264dM\",\"to\":\"Info_to__1OySq\"};","import btc from '../assets/btc.svg'\nimport eur from '../assets/eur.svg'\nimport rur from '../assets/rur.svg'\nimport uah from '../assets/uah.svg'\nimport usd from '../assets/usd.svg'\n\nexport enum Currency {\n  UAH = 'UAH',\n  BTC = 'BTC',\n  USD = 'USD',\n  EUR = 'EUR',\n  RUR = 'RUR',\n}\n\nexport type CurrencyType = {\n  [key in Currency]: string\n}\n\nexport const currencyFlags: CurrencyType = {\n  UAH: uah,\n  BTC: btc,\n  USD: usd,\n  EUR: eur,\n  RUR: rur,\n}\n","export default __webpack_public_path__ + \"static/media/btc.0965940a.svg\";","export default __webpack_public_path__ + \"static/media/eur.0d982a76.svg\";","export default __webpack_public_path__ + \"static/media/rur.131e59b5.svg\";","export default __webpack_public_path__ + \"static/media/uah.3f024d6e.svg\";","export default __webpack_public_path__ + \"static/media/usd.6b1a1f99.svg\";","export default __webpack_public_path__ + \"static/media/remove.e1213946.svg\";","import { ChangeEvent } from 'react'\n\nimport { currencyFlags } from '../../config/config'\nimport { CurrencyNameType } from '../../types/types'\nimport remove from '../../assets/remove.svg'\n\nimport s from './CurrencyRow.module.scss'\n\ninterface Props {\n  allCurrencies: CurrencyNameType[]\n  selectedCurrency: CurrencyNameType\n  handleCurrencyChange: (e: ChangeEvent<HTMLSelectElement>) => void\n  amount: number\n  handleAmountChange: (e: ChangeEvent<HTMLInputElement>) => void\n  handleResetAmount: () => void\n}\n\nexport default function CurrencyRow({\n  allCurrencies,\n  selectedCurrency,\n  handleCurrencyChange,\n  amount,\n  handleAmountChange,\n  handleResetAmount,\n}: Props) {\n  return (\n    <div className={s.container}>\n      <span className={s.inputContainer}>\n        <input\n          type=\"text\"\n          className={s.input}\n          value={amount}\n          onChange={handleAmountChange}\n        />\n        <button type=\"button\" className={s.button} onClick={handleResetAmount}>\n          <img className={s.remove} src={remove} alt=\"remove\" />\n        </button>\n      </span>\n      <img\n        className={s.img}\n        src={currencyFlags[selectedCurrency]}\n        alt=\"currency\"\n      />\n      <select\n        className={s.select}\n        value={selectedCurrency}\n        onChange={handleCurrencyChange}\n      >\n        {allCurrencies.map(currency => (\n          <option key={currency} value={currency}>\n            {currency}\n          </option>\n        ))}\n      </select>\n    </div>\n  )\n}\n","import { createAction } from '@reduxjs/toolkit'\n\nimport { CurrencyNameType } from '../types/types'\n\nexport const fromAmountAction = createAction<number, 'fromAmount'>('fromAmount')\nexport const toAmountAction = createAction<number, 'toAmount'>('toAmount')\nexport const fromCurrencyAction = createAction<CurrencyNameType, 'fromCurrency'>('fromCurrency')\nexport const toCurrencyAction = createAction<CurrencyNameType, 'toCurrency'>('toCurrency')\n","import {\n  fromAmountAction,\n  toCurrencyAction,\n  fromCurrencyAction,\n  toAmountAction,\n} from './actions'\n\nimport { AppStateType } from './store'\nimport { CurrencyNameType } from '../types/types'\n\nexport const getFromAmount = (state: AppStateType): number => state.currencies[fromAmountAction.type]\nexport const getToAmount = (state: AppStateType): number => state.currencies[toAmountAction.type]\nexport const getFromCurrency = (state: AppStateType): CurrencyNameType => state.currencies[fromCurrencyAction.type]\nexport const getToCurrency = (state: AppStateType): CurrencyNameType => state.currencies[toCurrencyAction.type]\n","\nimport { useSelector } from 'react-redux'\n\nimport {\n  getFromAmount,\n  getToCurrency,\n  getFromCurrency,\n  getToAmount,\n} from '../../redux/selectors'\n\nimport s from './Info.module.scss'\n\nexport default function Info() {\n  const fromAmount = useSelector(getFromAmount)\n  const toAmount = useSelector(getToAmount)\n  const fromCurrency = useSelector(getFromCurrency)\n  const toCurrency = useSelector(getToCurrency)\n\n  return (\n    <div className={s.container}>\n      {fromAmount} {fromCurrency} equals\n      <div className={s.to}>\n        {toAmount} {toCurrency}\n      </div>\n    </div>\n  )\n}\n","import { ExchangeRate } from '../types/types'\n\nconst BASE_URL: string =\n  'https://api.privatbank.ua/p24api/pubinfo?exchange&json&coursid=11'\n\nexport const getExchangeRates = async (): Promise<any> => {\n  try {\n    const data: ExchangeRate[] = await fetch(BASE_URL).then(response => {\n      return response.json()\n    })\n    return data\n  } catch (error) {\n    console.log('getExchangeRates api error: ', error)\n  }\n}\n","import { Currency } from '../config/config'\nimport { ExchangeRate } from '../types/types'\n\nexport const getCurrencyRate = (from: string, to: string, exchangeRates: ExchangeRate[]): number => {\n  if (from === to) {\n    return 1\n  }\n\n  const mapCurrencies: { [key: string]: number } = { [Currency.UAH]: 1 }\n\n  exchangeRates.forEach(rate => {\n    if (rate.ccy === Currency.BTC) {\n      mapCurrencies[rate.ccy] = +rate.sale * mapCurrencies[Currency.USD]\n    } else {\n      mapCurrencies[rate.ccy] = +rate.sale\n    }\n  })\n  return mapCurrencies[to] / mapCurrencies[from]\n}\n\nexport const validateInput = (value: string): string => {\n  if (value === '.') {\n    return ''\n  }\n  return value.replace(/[^.\\d]+/g, '').replace(/^([^.]*\\.)|\\./g, '$1')\n}\n","\nimport { useEffect, useState, ChangeEvent } from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport CurrencyRow from '../CurrencyRow/CurrencyRow'\nimport Info from '../Info/Info'\n\nimport { getExchangeRates } from '../../services/api'\nimport { getCurrencyRate, validateInput } from '../../utils/utils'\nimport { Currency } from '../../config/config'\nimport {\n  fromCurrencyAction,\n  toCurrencyAction,\n  fromAmountAction,\n  toAmountAction,\n} from '../../redux/actions'\nimport { ExchangeRate, CurrencyNameType } from '../../types/types'\n\nimport s from './App.module.scss'\n\nfunction App() {\n  const dispatch = useDispatch()\n  const [error, setError] = useState<boolean>(false)\n  const [allCurrencies, setAllCurrencies] = useState<CurrencyNameType[]>([])\n  const [fromCurrency, setFromCurrency] = useState<CurrencyNameType>()\n  const [toCurrency, setToCurrency] = useState<CurrencyNameType>()\n  const [—ÅurrencyRate, setCurrencyRate] = useState<number>(1)\n  const [amount, setAmount] = useState<number | string>(1)\n  const [amountFromCurrency, setAmountFromCurrency] = useState<boolean>(true)\n  const [exchangeRatesFromApi, setExchangeRatesFromApi] = useState<ExchangeRate[]>([])\n\n  useEffect(() => {\n    async function initDataFromApi(): Promise<void> {\n      const exchangeRates: ExchangeRate[] = await getExchangeRates()\n      setExchangeRatesFromApi(exchangeRates)\n\n      if (exchangeRates?.length) {\n        const baseCurrency = exchangeRates[0].base_ccy as CurrencyNameType\n        const currencies: CurrencyNameType[] = [\n          baseCurrency,\n          ...exchangeRates.map((exchangeRate) => exchangeRate.ccy as CurrencyNameType),\n        ]\n        setAllCurrencies(currencies)\n        setFromCurrency(Currency.UAH)\n        setToCurrency(Currency.USD)\n        dispatch(fromCurrencyAction(Currency.UAH))\n        dispatch(toCurrencyAction(Currency.USD))\n      } else {\n        setError(true)\n      }\n    }\n\n    initDataFromApi()\n  }, [dispatch])\n\n  useEffect(() => {\n    if (fromCurrency && toCurrency && exchangeRatesFromApi?.length) {\n      const rate = getCurrencyRate(\n        fromCurrency,\n        toCurrency,\n        exchangeRatesFromApi,\n      )\n      setCurrencyRate(rate)\n    }\n  }, [fromCurrency, toCurrency, exchangeRatesFromApi])\n\n  const handleFromCurrencyChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setFromCurrency(e.target.value as CurrencyNameType)\n    dispatch(fromCurrencyAction(e.target.value as CurrencyNameType))\n  }\n\n  const handleToCurrencyChange = (e: ChangeEvent<HTMLSelectElement>): void => {\n    setToCurrency(e.target.value as CurrencyNameType)\n    dispatch(toCurrencyAction(e.target.value as CurrencyNameType))\n  }\n\n  const handleFromAmountChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const amount = validateInput(e.target.value)\n    setAmount(amount)\n    setAmountFromCurrency(true)\n  }\n\n  const handleToAmountChange = (e: ChangeEvent<HTMLInputElement>): void => {\n    const amount = validateInput(e.target.value)\n    setAmount(amount)\n    setAmountFromCurrency(false)\n  }\n\n  const handleResetAmount = (): void => {\n    setAmount(0)\n  }\n\n  let toAmount: number\n  let fromAmount: number\n  if (amountFromCurrency) {\n    fromAmount = amount as number\n    toAmount = amount as number / —ÅurrencyRate\n  } else {\n    toAmount = amount as number\n    fromAmount = amount as number * —ÅurrencyRate\n  }\n\n  useEffect(() => {\n    dispatch(toAmountAction(+toAmount))\n    dispatch(fromAmountAction(+fromAmount))\n  }, [toAmount, fromAmount, dispatch])\n\n  return (\n    <div className={s.app}>\n      <h1>Currency Converter</h1>\n      {error ? (\n        <div className={s.error}>Oops! Something wrong. Please try later.</div>\n      ) : (\n          <>\n            <Info />\n            <CurrencyRow\n              allCurrencies={allCurrencies}\n              selectedCurrency={fromCurrency!}\n              handleCurrencyChange={handleFromCurrencyChange}\n              handleAmountChange={handleFromAmountChange}\n              handleResetAmount={handleResetAmount}\n              amount={fromAmount}\n            />\n            <div className={s.equals}>&#61;</div>\n            <CurrencyRow\n              allCurrencies={allCurrencies}\n              selectedCurrency={toCurrency!}\n              handleCurrencyChange={handleToCurrencyChange}\n              handleAmountChange={handleToAmountChange}\n              handleResetAmount={handleResetAmount}\n              amount={toAmount}\n            />\n          </>\n        )}\n    </div>\n  )\n}\n\nexport default App\n","import { createReducer, combineReducers } from '@reduxjs/toolkit'\n\nimport {\n  fromAmountAction,\n  toAmountAction,\n  fromCurrencyAction,\n  toCurrencyAction,\n} from './actions'\nimport { Currency } from '../config/config'\nimport { CurrencyNameType } from '../types/types'\n\ninterface CurrencyState {\n  fromAmount: number\n  toAmount: number\n  fromCurrency: CurrencyNameType\n  toCurrency: CurrencyNameType\n}\n\nconst initialState: CurrencyState = {\n  fromAmount: 1,\n  toAmount: 0,\n  fromCurrency: Currency.UAH,\n  toCurrency: Currency.USD,\n}\n\nconst currenciesReducer = createReducer(\n  initialState, builder =>\n  builder\n    .addCase(fromAmountAction, (state, action) => ({\n      ...state,\n      [fromAmountAction.type]: action.payload,\n    }))\n    .addCase(toAmountAction, (state, action) => ({\n      ...state,\n      [toAmountAction.type]: action.payload\n    }))\n    .addCase(fromCurrencyAction, (state, action) => ({\n      ...state,\n      [fromCurrencyAction.type]: action.payload\n    }))\n    .addCase(toCurrencyAction, (state, action) => ({\n      ...state,\n      [toCurrencyAction.type]: action.payload\n    }))\n)\n\nexport default combineReducers({\n  currencies: currenciesReducer,\n})\n","import { configureStore } from '@reduxjs/toolkit'\nimport rootReducer from './reducers'\n\nconst store = configureStore({\n  reducer: rootReducer,\n  devTools: process.env.NODE_ENV === 'development',\n})\n\nexport type AppDispatchType = typeof store.dispatch\n\nexport type AppStateType = ReturnType<typeof rootReducer>\n\nexport default store\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\n\nimport App from './components/App/App'\nimport store from './redux/store'\n\nimport './index.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CurrencyRow_container__u7Zeo\",\"inputContainer\":\"CurrencyRow_inputContainer__1Fjn8\",\"button\":\"CurrencyRow_button__3KvyR\",\"input\":\"CurrencyRow_input__2XBm9\",\"select\":\"CurrencyRow_select__2oSao\",\"img\":\"CurrencyRow_img__2pyEK\",\"remove\":\"CurrencyRow_remove__2rtqD\"};"],"sourceRoot":""}